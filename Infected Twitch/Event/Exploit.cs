#region

using System;
using System.Linq;
using Infected_Twitch.Core;
using Infected_Twitch.Menus;
using LeagueSharp;
using LeagueSharp.SDK;
using LeagueSharp.SDK.Utils;

#endregion

namespace Infected_Twitch.Event
{
    internal class Exploit : Core.Core
    {
        public static void Update(EventArgs args)
        {
            if (Target == null || !Target.IsValidTarget() || Target.IsDead || Target.IsInvulnerable) return;
            
            if(!MenuConfig.UseExploit) return;
            if(!Spells.Q.IsReady()) return;

            if (MenuConfig.Eaaq && Spells.E.IsReady())
            {
                if (Target.Distance(Player) < Player.GetRealAutoAttackRange(Target) - 75)
                {
                    if (Target.Health < Dmg.EDamage(Target) + Player.GetAutoAttackDamage(Target))
                    {
                        Spells.E.Cast();
                        do
                        {
                            Game.PrintChat("Exploit: Casting E AA Q");
                        } while (Spells.E.Cast());
                    }

                    else if (Target.Health < Dmg.EDamage(Target) + Player.GetAutoAttackDamage(Target) * 2.025 && Player.HealthPercent >= 65)
                    {
                        Spells.E.Cast();
                        do
                        {
                            Game.PrintChat("Exploit: Casting E AA AA Q");
                        } while (Spells.E.Cast());
                        
                    }
                }
            }

            if (!(Target.Health < Player.GetAutoAttackDamage(Target)) || !Player.IsWindingUp) return;

            Player.IssueOrder(GameObjectOrder.AttackUnit, Target);
            Spells.Q.Cast();
            {
                Game.PrintChat("Exploit Active...");
            }
            /*
            if (!MenuConfig.DisableAA) return;

            while (HasPassive)
            {
                Orbwalker.SetAttackState(false);
            }*/
        }
    }
}
